#!/bin/env bash
# Used for development to source all the boot/prod .envs


(return 0 2>/dev/null) && sourced=1 
# What exit code did that give?
if [[ $sourced -ne 1 ]] || [[ "$2" -eq "-h" ]]
then
    echo "zopen-importenvs must be sourced via the . (dot) shell builtin"
    echo "USAGE: . ./zopen-importenvs [path to buildenv to fetch dependency]"
    echo "If no argument is specified, zopen-importenvs will source all .env files from $HOME/zopen/prod and $HOME/zopen/boot"
    echo "If an argument is specified and it represents a buildenv file, zopen-importenvs will source the ZOPEN_*_DEPS specified dependencies from $HOME/zopen/prod and $HOME/zopen/boot"
    if [[ $sourced -ne 1 ]]; then
      exit 1     
    fi
    if [[ "$2" -eq "-h" ]]; then
      return 1     
    fi
fi

#depsPath has the details of the location of ports whose env files are consumed for sourcing 
depsPath="$HOME/zopen/prod|$HOME/zopen/boot"

# if the number of arguments passed to script is 0,
# then , the ports are fetched from $HOME/zopen/prod and $HOME/zopen/boot directory
# then its env files are fetched and sourced, if they are not already sourced.
if [ $# -eq 0 ]
then
     echo "Sourcing projects from $HOME/zopen/prod and $HOME/zopen/boot"
     
     # arrOfDirs, is an array which holds the names of dirs whose env is set
     declare -a arrOfDirs
     unset arrOfDirs[@]

     #Loop through zopen/boot & zopen/prod
     for path in $(echo ${depsPath} | sed "s/|/ /g") ; do
         for deps in $(find "${path}" -name ".env")
         do
          depdir=$(dirname "${deps}")
          dirName="$(basename ${depdir})"

          #If env from this directory is not sourced then, fetch the env file and source it 
          if [[ ! " ${arrOfDirs[*]} " =~ " ${dirName} " ]]; then
             # array doesn't contain hence, source the env file
             echo "Setting up ${depdir} dependency environment"
             cd $depdir
             . ./.env

             # If sourcing is successful then, add to array
             if [ $? -eq 0 ]; then
                arrOfDirs+=($dirName)
             fi
             cd - 
           else
             echo "Skipping the set path = $dirName, as it is already sourced" 
           fi
         done
      done 
else 
    #If path is provided then builedenv file is fetched from the provided path 
    pathForBuild=$1
    if [ ! -d "${HOME}/zopen/boot/" ] && [ ! -d "${HOME}/zopen/prod/" ]; then
       echo "${HOME}/zopen/boot & ${HOME}/zopen/prod directories do not exist. Exiting"
       return 1 
    fi

    if [ -f ${pathForBuild}/buildenv ]
    then
       unset ZOPEN_GIT_DEPS
       unset ZOPEN_TARBALL_DEPS
       unset ZOPEN_TYPE
 
       ZOPEN_GIT_DEPS=$(. ${pathForBuild}/buildenv; echo $ZOPEN_GIT_DEPS); 
       ZOPEN_TARBALL_DEPS=$(. ${pathForBuild}/buildenv; echo $ZOPEN_TARBALL_DEPS); 
       ZOPEN_TYPE=$(. ${pathForBuild}/buildenv; echo $ZOPEN_TYPE); 
       
       if [ "${ZOPEN_TYPE}x" = "TARBALLx" ]; then
          deps="${ZOPEN_TARBALL_DEPS}"
       else
          deps="${ZOPEN_GIT_DEPS}"
       fi

       #loop through the dependencies based on if it is tarball or git
       #and source the env files 
       for dep in $deps; do
           fail=true
           for path in $(echo ${depsPath} | sed "s/|/ /g") ; do
               if [ -r "$path/${dep}/.env" ]; then
                  fail=false
                  depdir="$path/${dep}"
                  echo "Setting up ${depdir} dependency environment"
                  cd "${depdir}" && . ./.env 

                  #donot check in next dep path as the env for this dependency port is foudn and sourced.
                  break;
               fi
           done
           if $fail; then
              echo "Unable to find .env for dependency ${dep}"
           fi
       done 
    fi
fi
